# -*- coding: utf-8 -*-
"""task1b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14opCP4LVW0WsMQ7wlck7lz9PCitCDm0k
"""

#task 1 b
'''here i have used iscyclic function to detect cycle then i have used kahns algo to
top sort.accordingly. with the help of indegre dictionary . i have poped when the indegree is zero
'''

import numpy as np
def isCyclic(G):
    visited = {}
    path = {}

    for i in G:
        visited[i] = False
        path[i] = False


    for i in G:
        if not visited[i]:
            if DFS_detect_cycle(G, i, visited, path):
                return True

    return False

def DFS_detect_cycle(G, s, visited, path):
    visited[s] = True
    path[s] = True

    for v in G[s]:
        if not visited[v]:
            if DFS_detect_cycle(G, v, visited, path):
                return True

        elif path[v]:
            return True

    # Remove the current vertex from the path since we are backtracking
    path[s] = False
    return False

def kahn (graph, visited, indegre):
    s=""
    if isCyclic(graph):
        print("IMPOSSIBLE")
        s="IMPOSSIBLE"

    else: # main kahn algo starts from here
        queue = [ ]
        for key in indegre:
            if indegre [key] == 0:
                queue.append(key )
                visited[ key ] = True

        while queue:
            temp = queue.pop(0)
            print(temp)
            s+=str(temp)+" "
            for child in graph [ temp ]:
                if not visited [ child]:
                    indegre [ child ] -=1
                    if indegre [ child ]==0:
                        queue. append(child)
                        visited [child] = True

    print(s)
    khata.write(s)



#for opening file
boi= open ("input1b.txt","r")
khata= open("output1b.txt","w")

x,y = list(map(int,boi.readline().split()))
graph={}
visited = {}
indegre = {}
for i in range(1, x+1):
    graph[i] = []
    visited[i] = False
    indegre [ i] = 0
for i in range (y):
    u,v = list(map(int,boi.readline().split()))
    graph[u] . append(v)
    indegre[v] +=1





print(graph)
print(indegre)
kahn(graph, visited, indegre)