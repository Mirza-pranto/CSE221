# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14opCP4LVW0WsMQ7wlck7lz9PCitCDm0k
"""

#task 3
'''
here i run a dfs traversal first then i trasposed the graph and
run a dfs according to the dpreviously obtainded stack of dfs  thraversal
then
'''

def reverse_top_sort(g,s,l,v):
    v[s] = 1
    l.append(s)
    for i in g[s]:
      if v[i] == 0 :
        #l.append(i)
        reverse_top_sort(g,i,l,v)
def dfs(g,s,v):
    #out.write(f"{s} ")
    v[s] = 1
    for i in g[s]:
      if v[i] == 0:
        dfs(g,i,v)
    out.write(f"{s} ")
inp= open("input3.txt","r")
out= open("output3.txt","w")

graph = {}

x,y = inp.readline().split(" ")

visited1= [0] * (int(x)+1)
lis=[]
lis2=[]
visited2= [0] * (int(x)+1)

for i in range(int(y)):
  k,q =  inp.readline().split(" ")
  if int(k) in graph:
    graph[int(k)].append(int(q))
  else:
    graph[int(k)] = [int(q)]

for i in range(int(x)+1):
    if i not in graph:
        graph[i]=[]

for i in graph:
  if  i !=0 and visited1[i] ==0:
    reverse_top_sort(graph,i,lis,visited1)


graph2 ={}

for i in graph:
   if graph[i] != []:
      for j in graph[i]:
        if j in graph2:
          graph2[j].append(i)
        else:
           graph2[j]= [i]



for i in range(int(x)+1):
    if i not in graph2:
        graph2[i]=[]

for i in lis:
   if  i !=0 and visited2[i] ==0:
      dfs(graph2,i,visited2)
      out.write(f"\n")